buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
        
		"classpath:resources/motor.clj"
		"classpath:resources/data_processor.clj"
		"classpath:resources/definiciones/definiciones.clj"
		"classpath:resources/funcionesEspeciales/funcionesEspeciales.clj"
		"classpath:resources/utiles/operacionesRecursivas.clj"
		"classpath:resources/cheshire/core.clj"
		
    }
}


version "0.1"
group "monitorapi"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    //compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    
    //***************Deploy Servidor Heroku*********************
    
    compile 'com.github.jsimone:webapp-runner:8.5.11.3'
    
    //*********PARA CLOJURE*************************************   
    
    compile "org.clojure:clojure:1.10.0-alpha4"
    compile "org.clojure:spec.alpha:0.1.143"
    compile 'cheshire:cheshire:5.8.0' //Codificador-Decodificador-JSON-Clojure-Encoding-Decoding
    
    //*******************************************************************
    //INFO spec: is a Clojure library to describe the structure of data 
    //and functions. Specs can be used to validate data,
    //conform (destructure) data, explain invalid data,
    //generate examples that conform to the specs,
    //and automatically use generative testing to test functions.*/
    //Para la siguiente exception:
    //clojure.lang.ExceptionInfo: 
    //				Call to clojure.core/ns did not conform to spec:
	//In: [1] val: ((:require [clojure.core :refer :all] 
	//				:require [data-processor :refer :all])) 
	//fails spec: 
	//			:clojure.core.specs.alpha/ns-form at:
	//Para esta excpetion se estaba usando:
	//clojure.core 1.10-alpha4 (la ultima hasta el momento)
	//spec.alpha  0.1.24 (la ultima es 01.143).Ademas
	//No se de donde salio porque solo aparece 0.1.23. 
	//Maven Central; (Debe ser una beta...No; tampoco figura como beta).
	//*********************************************************** 
    //La siguiente libreria:es posible necesitarla por algunos bugs
    // de libreria pero no incorporarla ht que no se haga mencion
    //a cosas como --clojre.core/refer-clojure-- 
    //***compile 'org.clojure:core.async:0.4.474'***
    //De Maven Central se obtiene directamente el compile formato.
    //Las versiones 1.9 alpha parecen transitar,
    // por distintos inconvenientes tambien, con otras como:
    // core.async
    // clojure.spec
    // Tambien algunos bugs usando proto-Repl con ATOM.
    //*********************************************************
    //FORMATO DE DEPENDENCIA
    //compile: "<your_group_id> : <your_artifact_id> : <version>""
	//**********************************************************
}

bootRun {
		// If System.console() return non null instance,
    // we force ANSI color support with 'always', 
    // otherwise use default 'detect'.
    jvmArgs = ['-Dspring.output.ansi.enabled=' + (System.console() ? 'always' : 'detect')]
    //jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}


assets {
    minifyJs = true
    minifyCss = true
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

//***********************************************************************
/*Heroku deploy: https://devcenter.heroku.com/articles/deploying-gradle-apps-on-heroku#using-webapp-runner-to-deploy-war-files*/
//PROCFILE:web: cd build ; java -Dgrails.env=prod -jar ../build/server/webapp-runner-*.jar --expand-war --port $PORT libs/*.war

task stage() {
    dependsOn clean, war
}

tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.war")
}

war.mustRunAfter clean


task copyToLib(type: Copy) {
    into "$buildDir/server"
    from(configurations.compile) {
        include "webapp-runner*"
    }
}

stage.dependsOn(copyToLib)

//************************************************************




//***********Alternativas para lo mismo*********************************
task printBuildScriptClasspath {

doLast {
    println project.buildscript.configurations.classpath.asPath
}
}
task buildScriptDependencies(type: org.gradle.api.tasks.diagnostics.DependencyReportTask) {
    configurations = project.buildscript.configurations
}
//***********

//You can list test runtime dependencies with:

//gradle dependencies --configuration=testRuntime
//Or, if you want to see the actual files:

task printClasspath {
    doLast {
        configurations.testRuntime.each { println it }
    }
}

//Also, to list the classpath for the main (non-test) application run use:

task run  {
    doLast {
        configurations.runtime.each { println it }
    }
}

//ext {
//File configFile = file("${rootDir}/src/main/resources/fiuba/materia7510/aplicacion/generador/motor.clj")}
